steps:
  # 1. Build the application image, which is now very fast because it uses the base image.
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '${_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:${SHORT_SHA}'
      - '.'

  # 2. Push the lightweight application image to Artifact Registry.
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:${SHORT_SHA}'

  # 3. Deploy the container image to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image=${_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:${SHORT_SHA}'
      - '--region=${_LOCATION}'
      - '--platform=managed'
      - '--memory=16Gi' 
      - '--cpu=4'
      # Allow public access for your webapp to call it. 
      # -------------------------------- ******************* ##################### !!!!!!!!!!!!!!!!!! to do: Lock this down later.
      - '--allow-unauthenticated'
      - '--set-env-vars=ALLOWED_CALLER_EMAIL=vercel-backend-sa@data-pipelines-450611.iam.gserviceaccount.com'
      - '--set-env-vars=APP_ENV=local'
      # -------------------------------- ******************* ##################### !!!!!!!!!!!!!!!!!!

# Store the final application image in Artifact Registry.
images:
  - '${_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:${SHORT_SHA}'

# Define your substitution variables.
substitutions:
  _SERVICE_NAME: 'qwen-embedding-api'
  _REPO_NAME: 'embedding-services' # Must match the name of your Artifact Registry repo
  _LOCATION: 'us-central1'         # Should match the region of your Artifact Registry repo

# Specify the logging option. A powerful machine type is no longer needed here.
options:
  logging: CLOUD_LOGGING_ONLY